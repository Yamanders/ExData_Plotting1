{
    "contents" : "---\ntitle: \"RepData_PeerAssessment1\"\nauthor: \"Amanda Molling\"\ndate: \"Saturday, March 14, 2015\"\noutput: html_document\n---\nThis is the summary of the data that was read in:   \n\n```{r}\nunzip(\"activity.zip\")\n activityData <- read.csv(\"activity.csv\")\nsummary(activityData)\nhead(activityData)\n```\nIf I wanted to convert my dates to type date, I could use. \n\n```{r, echo=TRUE}\nactivityData$date <- as.Date(activityData$date)\n\n\n```\nI computed the mean, median, and sum data as follows:\n\n```{r}\ntotalDailySteps <- aggregate(steps ~ date, activityData, sum)\nmeanDailySteps <- aggregate(steps ~ date, activityData, mean)\nmedDailySteps <- aggregate(steps ~ date, activityData, mean)\n\nhead(totalDailySteps)\n```\nThen my histogram:\n\n```{r}\nhist(totalDailySteps[, 2], breaks = 20, xlab = \"Total Steps Each Day\", main = \"Histogram of Total Daily Steps Taken\")\n```\nFollowed by analysis on that data:\n```{r}\nmean(totalDailySteps[, 2])\nmedian(totalDailySteps[,2])\n```\nFurther analysis comparing the average number of steps at each time interval across the days yields:\n```{r}\nmeanDailyStepsByInterval <- aggregate(steps ~ interval, activityData, mean)\nlibrary('lattice')\nxyplot(steps ~ interval, meanDailyStepsByInterval, xlab = \"\n       \")\n```\nThe time interval with the most steps is found to be 835.\n```{r}\n\nwhich(meanDailyStepsByInterval == max(meanDailyStepsByInterval[2]), arr.ind = TRUE)\n```\nwhere the value is:\n\n```{r}\n\nmax(meanDailyStepsByInterval[,2])\n\n## And the specific interval is :\n\nmeanDailyStepsByInterval[104, 1]\n```\n\nFor the second part, I find the number of complete cases and build a table. Then, I can subtract the good cases from the total number of obs. Another way to do this is by simply calculating the number of bad cases as shown.\n\n```{r}\n##I make the good data first\ngood <-complete.cases(activityData)\n\ngoodData<-activityData[good,][,]\nnrow(goodData)\nnrow(activityData) - nrow(goodData)\n\n##That is the number of bad rows\n## The second method:\nbadData <- activityData[!good,][,]\nnrow(badData)\n```\n# Replacing Missing Data\n### To fill in the missing data, I use my mean data calcuated at each time interval from before:\n```{r}\nnewActivityData <- activityData\nfor (i in 1 : (nrow(activityData) )){\n  if (  is.na( activityData[ i , 1] ) ) {\n    newActivityData[ i , 1] <- meanDailyStepsByInterval[ ( ( i - 1 ) %% ( nrow(meanDailyStepsByInterval) ) + 1 ), 2]\n  }\n}\n```\n### As confirmation of my replacement, I have shown the front and back of each of the tables, where NA values dominate. \n\n```{r}\nhead(newActivityData)\ntail(newActivityData)\nhead(meanDailyStepsByInterval)\ntail(meanDailyStepsByInterval)\n```\n\n##The Histogram of the Data with Replaced Values:\n```{r}\ntotalDailySteps <- aggregate(steps ~ date, newActivityData, sum)\nhist(totalDailySteps[, 2], breaks = 20, xlab = \"Total Steps Each Day\", main = \"Histogram of Total Daily Steps Taken\")\n```\n\n## The mean and median of the data with artificially replaced  values are:\n```{r}\n\nmean(totalDailySteps[,2])\nmedian(totalDailySteps[,2])\n```\nBy looking the mean (107.66.19) and median (10765) from before, it can be seem that any change in the mean is not detectable. In addition, due to relative proximity of the median and mode, the change in the median was small and calculated to be less than 2 hundreths of a percent change:\n\n```{r}\npercentDifference <- 100 * (10766.19 - 10765)/(10765)\nprint(percentDifference)\n```\n# Looking at Weekends Vs. Weekdays:\n\n```{r}\nweekValue <- (weekdays(as.Date(activityData$date)))\nbig <- cbind(activityData, weekValue)\nfor (step in 1:nrow(activityData)){\n    if ( ( big[step, 4] == \"Sunday\" ) || ( big[step, 4] == \"Saturday\") ){\n    #  big[step, 4 ] <- \"Weekend\"\n     # print(\"Weekend\")\n      }\n    else {\n     # big[step, 4] <- \"Weekday\"\n    }\n}\n  head(big)\n",
    "created" : 1426889149102.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "400061093",
    "id" : "BCE0132E",
    "lastKnownWriteTime" : 1430347899,
    "path" : "~/School Files/Open Courseware/Coursera/Reproducible Research/project1/RepData_PeerAssessment1/RepDataPeer1.Rmd",
    "project_path" : null,
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_markdown"
}